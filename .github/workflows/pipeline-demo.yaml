# THE SCRIPT OUTSIDE OF POSTMAN IS JUST FOR DEMONSTRATION PURPOSES
name: Test & Deploy

on:
  pull_request:
    branches: [ main, dev ]
    paths:
      - '**.sh'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      
      ### === ### ADD POSTMAN CLI SCRIPT TO EXISTING SCRIPT ### === ###
      - name: Install Postman CLI
        run: |
          curl -o- "https://dl-cli.pstmn.io/install/linux64.sh" | sh
      - name: Login to Postman CLI
        run: postman login --with-api-key ${{ secrets.POSTMAN_API_KEY }}
      - name: Run API tests
        run: |
          postman collection run "${{ github.workspace }}/postman/collections/Customers CHALLENGE.json" --integration-id "146213-${{ github.run_id }}"
          # Lint your API using Postman CLI
          postman api lint ca3253e1-23be-4147-91e9-69747c1a1c85 --integration-id 146213
      ### === ### CONTINUE WITH REST OF CLI SCRIPT ### === ###
      
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          environment: 'AzureCloud'
      
      - name: Run any shell scripts in this commit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          az config set extension.use_dynamic_install=yes_without_prompt
        
          echo "===================================="
          echo "Files in PR ${{ github.head_ref }}:"
          gh pr view ${{ github.head_ref }} --json files -q '.files[].path'
          
          # For each file in this commit          
          for file in $( gh pr view ${{ github.head_ref }} --json files -q '.files[].path' )
          do
            # If file exists and is shell script
            if [ -e "$file" ]
            then
              if [[ "$file" == *.sh ]]
              then
                # Generate a resource group name so that it can be deleted when finished
                let "randomIdentifier=$RANDOM*$RANDOM"
                resourceGroup="test-deploy-rg-$randomIdentifier"

                echo "===================================="
                echo "Running $file ..."
                pushd $(dirname "${file}")
                chmod +X $(basename "${file}")
                RESOURCE_GROUP=$resourceGroup /bin/bash $(basename "${file}")
                popd
                echo "===================================="

                # Clean up the resource group
                if [ $(az group exists --name $resourceGroup) = true ]; then
                  echo "Deleting resource group $resourceGroup..."
                  az group delete -n $resourceGroup -y --no-wait
                fi
              fi
            fi
          done
